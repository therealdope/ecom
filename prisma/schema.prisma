generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  cartItems     CartItem[]
  wishlist      WishlistItem[]
  orders        Order[]
  reviews       Review[]
  payments      Payment[]
  profile       UserProfile?
  vendorReviews VendorReview[]  // Add this field to fix the relation
  createdAt     DateTime        @default(now())
}

model Vendor {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  products    Product[]
  orders      Order[]       @relation("VendorOrders")
  payments    Payment[]
  profile     VendorProfile?
  shops       Shop[]        // Add this field to complete the relation
  createdAt   DateTime      @default(now())
}

model UserProfile {
  id          String      @id @default(uuid())
  userId      String      @unique
  phoneNumber String?
  avatar      String?
  addresses   Address[]
  user        User        @relation(fields: [userId], references: [id])
}

model VendorProfile {
  id              String          @id @default(uuid())
  vendorId        String          @unique
  storeName       String
  description     String?
  logo            String?
  businessAddress String
  taxId           String?
  bankDetails     String?
  rating          Float           @default(0)
  vendor          Vendor          @relation(fields: [vendorId], references: [id])
  reviews         VendorReview[]
}

model Address {
  id            String      @id @default(uuid())
  userProfileId String
  street        String
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean     @default(false)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
}

model ProductCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  products    Product[]
}

model Shop {
  id          String    @id @default(uuid())
  name        String
  description String
  address     String
  phone       String
  vendorId    String    
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([vendorId])
}

// Update the Product model to include shop
model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  imageUrl    String
  vendorId    String
  vendor      Vendor           @relation(fields: [vendorId], references: [id])
  shopId      String
  shop        Shop             @relation(fields: [shopId], references: [id])
  categoryId  String
  category    ProductCategory  @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  orderItems  OrderItem[]
  createdAt   DateTime         @default(now())
}

model ProductVariant {
  id        String        @id @default(uuid())
  productId String
  size      String?
  color     String?
  sku       String
  price     Float
  stock     Int
  product   Product       @relation(fields: [productId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]
}


// Add these models to your existing schema

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  product Product       @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
}


model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model StripePayment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  paymentId     String        @unique  // Stripe payment intent ID
  amount        Float
  currency      String        @default("usd")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

// Update Order model to include stripe payment
model Order {
  id          String       @id @default(uuid())
  userId      String
  vendorId    String
  total       Float
  status      OrderStatus
  address     String
  createdAt   DateTime     @default(now())
  orderItems  OrderItem[]
  payment     Payment[]    // Changed to one-to-many relation
  user        User         @relation(fields: [userId], references: [id])
  vendor      Vendor       @relation("VendorOrders", fields: [vendorId], references: [id])
}

model OrderItem {
  id         String         @id @default(uuid())
  orderId    String
  productId  String
  variantId  String         // <-- NEW FIELD
  quantity   Int
  price      Float
  order      Order          @relation(fields: [orderId], references: [id])
  product    Product        @relation(fields: [productId], references: [id])
  variant    ProductVariant @relation(fields: [variantId], references: [id])
}


model Payment {
  id          String        @id @default(uuid())
  orderId     String
  userId      String
  vendorId    String
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String
  createdAt   DateTime      @default(now())
  order       Order         @relation(fields: [orderId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  vendor      Vendor        @relation(fields: [vendorId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VendorReview {
  id              String   @id @default(uuid())
  vendorProfileId String
  userId          String
  rating          Int
  comment         String
  createdAt       DateTime @default(now())
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}


model PromoCode {
  id          String   @id @default(uuid())
  code        String   @unique
  discount    Float
  isPercent   Boolean  @default(true)
  validFrom   DateTime
  validUntil  DateTime
  maxUses     Int?
  usedCount   Int      @default(0)
  createdAt   DateTime @default(now())
}

model GiftCard {
  id          String   @id @default(uuid())
  code        String   @unique
  balance     Float
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
}

// Update Order model
model Order {
  id          String       @id @default(uuid())
  userId      String
  vendorId    String
  total       Float
  status      OrderStatus
  address     String
  createdAt   DateTime     @default(now())
  orderItems  OrderItem[]
  payment     Payment[]    // Changed to one-to-many relation
  user        User         @relation(fields: [userId], references: [id])
  vendor      Vendor       @relation("VendorOrders", fields: [vendorId], references: [id])
  promoCode   String?
  giftCard    String?
}
