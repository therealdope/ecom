generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  RAZORPAY
}

enum NotificationType {
  ORDER_PLACED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  NEW_MESSAGE
  NEW_REVIEW
  PROMO
  LOW_STOCK_ALERT
}


model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(USER)
  cartItems     CartItem[]
  wishlist      WishlistItem[]
  orders        Order[]
  reviews       Review[]
  payments      Payment[]
  profile       UserProfile?
  vendorReviews VendorReview[]
  createdAt     DateTime       @default(now())
  chats         Chat[]
  userNotifications UserNotification[]
}

model Vendor {
  id        String         @id @default(uuid())
  name      String
  email     String         @unique
  password  String
  products  Product[]
  orders    Order[]        @relation("VendorOrders")
  payments  Payment[]
  profile   VendorProfile?
  shops     Shop[]
  createdAt DateTime       @default(now())
  chats     Chat[]
  vendorNotifications VendorNotification[]
}

model UserProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  phoneNumber String?
  avatar      String?
  addresses   Address[]
  user        User      @relation(fields: [userId], references: [id])
}

model VendorProfile {
  id              String         @id @default(uuid())
  vendorId        String         @unique
  phoneNumber     String?
  storeName       String?
  description     String?
  logo            String?
  businessAddress String?
  taxId           String?
  bankDetails     String?
  rating          Float          @default(0)
  vendor          Vendor         @relation(fields: [vendorId], references: [id])
  reviews         VendorReview[]
}

model Address {
  id            String      @id @default(uuid())
  userProfileId String
  street        String
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean     @default(false)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
}

model Shop {
  id          String    @id @default(uuid())
  name        String
  description String
  address     String
  phone       String
  vendorId    String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([vendorId])
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  imageUrl      String
  vendorId      String
  vendor        Vendor           @relation(fields: [vendorId], references: [id])
  shopId        String
  shop          Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  categoryId    String
  category      ProductCategory  @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  createdAt     DateTime         @default(now())
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  size       String?
  color      String?
  sku        String
  price      Float
  stock      Int
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id])
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  vendorId      String
  total         Float
  status        OrderStatus
  address       Json
  createdAt     DateTime       @default(now())
  orderItems    OrderItem[]
  payment       Payment[]
  user          User           @relation(fields: [userId], references: [id])
  vendor        Vendor         @relation("VendorOrders", fields: [vendorId], references: [id])
  promoCode     String?
  giftCard      String?
  paymentMethod PaymentMethod
  orderOtp      OrderOtp?  
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  price     Float
  order     Order          @relation(fields: [orderId], references: [id])
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model OrderOtp {
  id        String   @id @default(uuid())
  orderId   String   @unique
  otp       String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
}


model Payment {
  id        String        @id @default(uuid())
  orderId   String
  userId    String
  vendorId  String
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    String
  createdAt DateTime      @default(now())
  order     Order         @relation(fields: [orderId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  vendor    Vendor        @relation(fields: [vendorId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VendorReview {
  id              String        @id @default(uuid())
  vendorProfileId String
  userId          String
  rating          Int
  comment         String
  createdAt       DateTime      @default(now())
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model PromoCode {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Float
  isPercent  Boolean  @default(true)
  validFrom  DateTime
  validUntil DateTime
  maxUses    Int?
  usedCount  Int      @default(0)
  createdAt  DateTime @default(now())
}

model GiftCard {
  id        String    @id @default(uuid())
  code      String    @unique
  balance   Float
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model Chat {
  id        String    @id @default(uuid())
  userId    String
  vendorId  String
  user      User      @relation(fields: [userId], references: [id])
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, vendorId])
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  senderId  String
  isVendor  Boolean
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
}

model UserNotification {
  id         String           @id @default(uuid())
  userId     String
  content    String
  type       NotificationType
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())

  user       User             @relation(fields: [userId], references: [id])
}


model VendorNotification {
  id         String   @id @default(uuid())
  vendorId   String
  content    String
  type       NotificationType
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  vendor     Vendor   @relation(fields: [vendorId], references: [id])
}
